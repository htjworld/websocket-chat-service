import React, { useEffect, useState } from "react";
import socket from "../../server";
import { Button } from "@mui/base/Button";
import MessageContainer from "../../components/MessageContainer/MessageContainer";
import InputField from "../../components/InputField/InputField";
import "./ChatPage.css";
import ChatSidePanel from "../../components/ChatSidePanel/ChatSidePanel";
import InvitePanel from "../../components/InvitePanel/InvitePanel";
import { useParams } from "react-router-dom";
import { useNavigate } from "react-router-dom";


const ChatPage = ({ user }) => {
  const [messageList, setMessageList] = useState([]);
  const [message, setMessage] = useState("");
  const [members, setMembers] = useState([]);
  const [isPanelOpen, setIsPanelOpen] = useState(false);
  const [invitePanelOpen, setInvitePanelOpen] = useState(false);
  const [allUsers, setAllUsers] = useState([]); // Ï†ÑÏ≤¥ Ïú†Ï†Ä Î™©Î°ù
  const [selectedUsers, setSelectedUsers] = useState([]);

  const { id } = useParams(); // Ïú†Ï†ÄÍ∞Ä Ï°∞Ïù∏Ìïú Î∞©Ïùò ÏïÑÏù¥ÎîîÎ•º urlÏóêÏÑú Í∞ÄÏ†∏Ïò®Îã§.

  const navigate = useNavigate();
  const togglePanel = () => {
    const willClose = isPanelOpen; // Ïù¥ÎØ∏ Ïó¥Î†§ÏûàÎäî ÏÉÅÌÉúÏóêÏÑú ÎàÑÎ•¥Î©¥ Îã´ÌûàÎãàÍπå
    setIsPanelOpen(!isPanelOpen);
  
    if (willClose) {
      // Ìå®ÎÑê Îã´ÌûàÎäî ÏÉÅÌô©Ïù¥Î©¥ Ï¥àÎåÄÏ∞ΩÎèÑ Í∞ôÏù¥ Îã´Í∏∞
      setInvitePanelOpen(false);
    }
  };
  const toggleInvitePanel = () => {
    setInvitePanelOpen(!invitePanelOpen);
  };

  useEffect(() => {
    socket.emit("joinRoom", id, (res) => {
      if (res && res.ok) {
        setMembers(res.members)
        // Í∏∞Ï°¥ Î©îÏãúÏßÄ Î∞õÏïÑÏò§Í∏∞
        socket.emit("getRoomChats", id, (res) => {
          if (res.ok) {
            setMessageList(res.chats);
          } else {
            console.error("Failed to fetch previous messages:", res.message);
          }
        });
      } else {
        console.log("fail to join", res);
      }
    });

    socket.on("message", (res) => {
      setMessageList((prevState) => prevState.concat(res));
    });

    
    socket.emit("getAllUsers", null, (res) => {
      if (res.ok) {
        const inviteCandidates = res.users.filter(
          (u) => !members.some((m) => m._id === u._id) && u._id !== user._id
        );
        setAllUsers(inviteCandidates);
      } else {
        console.error("Ïú†Ï†Ä Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", res.message);
      }
    });

    socket.on("membersUpdated", (updated) => {
      setMembers(updated); // ‚úÖ ChatSidePanel Î©§Î≤Ñ Î™©Î°ù Í∞±Ïã†
  
      // ‚úÖ Ï¥àÎåÄ ÎåÄÏÉÅ Î¶¨Ïä§Ìä∏ÎèÑ Í∞±Ïã†
      socket.emit("getAllUsers", null, (res) => {
        if (res.ok) {
          const inviteCandidates = res.users.filter(
            (u) =>
              !updated.some((m) => m._id === u._id) && u._id !== user._id
          );
          setAllUsers(inviteCandidates);
        }
      });
    });

    // ÌÅ¥Î¶∞ÏóÖ (Ï§ëÎ≥µ Î∞©ÏßÄ)
    return () => {
      socket.off("message");
      socket.off("membersUpdated");
    };
  }, [id]);

  const sendMessage = (event) => {
    event.preventDefault();
    socket.emit("sendMessage", message, (res) => {
      if (!res.ok) {
        console.log("error message", res.error);
      }
      setMessage("");
    });
  };


  const leaveRoom = () => {
    const confirmLeave = window.confirm("Ï†ïÎßê Ïù¥ Î∞©ÏóêÏÑú ÎÇòÍ∞ÄÏãúÍ≤†ÏäµÎãàÍπå?");
    if (!confirmLeave) return;
  
    socket.emit("leaveRoom",  null, (res) => { 
      // ÏÑúÎ≤ÑÏóêÏÑú userController.checkUser(socket.id) , socket.currentRoom 
      // Í∏∞Î∞òÏúºÎ°ú Ïú†Ï†ÄÏôÄ Î∞©ÏùÑ ÌÉêÏÉâ
      if (res.ok) {
        socket.emit("getRooms", null, () => {
          navigate("/");
        });
      } else {
        console.log("hi");
        
        console.log(user,res)
        alert("Î∞© ÎÇòÍ∞ÄÍ∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    });
  };

  const backToList = () => {
    socket.emit("getRooms", null, () => {
      navigate("/");
    });
  };

  const handleInvite = () => {
    console.log("üî• handleInvite called with:", selectedUsers); // Ïù¥Í±∞ Ï∂îÍ∞Ä

    socket.emit("inviteUsers", { roomId: id, userIds: selectedUsers }, (res) => {
      if (res.ok) {
        alert("Ïú†Ï†ÄÎ•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï¥àÎåÄÌñàÏäµÎãàÎã§!");
        setInvitePanelOpen(false);
        setSelectedUsers([]);
      } else {
        alert("Ï¥àÎåÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    });
  };

  const toggleSelectUser = (userId) => {
    setSelectedUsers((prev) =>
      prev.includes(userId)
        ? prev.filter((id) => id !== userId)
        : [...prev, userId]
    );
  };

  return (
    <div>
      <div className="App">
        <div className="chat-nav">
          <nav>
            <Button onClick={backToList} className="back-button">
              ‚Üê
            </Button>
            <div className="nav-user">{user.name}</div>
          </nav>
          <Button onClick={togglePanel} className="toggle-panel-button">
            {isPanelOpen ? "X" : "‚ò∞"}
          </Button>
        </div>
          <ChatSidePanel
            isOpen={isPanelOpen}
            members={members}
            onInviteClick={toggleInvitePanel}
            onLeaveRoom={leaveRoom}
          />
          <InvitePanel
            isOpen={invitePanelOpen}
            onClose={() => setInvitePanelOpen(false)}
            roomId={id}
            members={members}
            socket={socket}
          />

        <div>
          {messageList.length > 0 ? (
            <MessageContainer messageList={messageList} user={user} />
          ) : null}
        </div>
        <InputField
          message={message}
          setMessage={setMessage}
          sendMessage={sendMessage}
        />
      </div>
    </div>
  );
};

export default ChatPage;
